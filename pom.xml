<?xml version="1.0" encoding="utf-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" 
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- coordinates for model and artifact -->
  <modelVersion>4.0.0</modelVersion>
  <groupId>eu.simuline</groupId>
  <artifactId>Relana</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Relana</name>

  <description>
    An example for a modelling software. 
    This is in fact an old project. 
    It is important not so much because of its content 
    but to serve as a prototype to learn from. 
  </description>

  <url>http://www.simuline.eu</url><!-- maybe not specific enough -->
  <organization>
    <name>l2r.org</name>
    <url>http://www.simuline.eu</url>
  </organization>

  <developers>
    <developer>
      <name>Ernst Reissner</name>
      <email>Ernst.Reissner@simuline.eu</email>
      <timezone>Europe/Berlin</timezone>
    </developer>
  </developers>
  <!-- mailingLists></mailingLists-->

  <!-- properties: ensures reproducibility -->
  <properties>
    <versionMvn>3.5.0</versionMvn>
    <!-- antlr4, its runtime and mvn plugin all same version, 
         tied to antlr-annotation and ST4 -->
    <versionAntlr>4.7</versionAntlr><!-- tied to antlr 4.7 -->
    <!--versionAntlrAnnot>4.3</versionAntlrAnnot--><!-- tied to antlr 4.7 -->
    <versionAntlrST4>4.0.8</versionAntlrST4>  <!-- tied to antlr 4.7 -->
    <versionAntlr3>3.5.2</versionAntlr3>  <!-- from ST4 -->
    <versionJUnit>4.12</versionJUnit>
    <!-- tied to junit 4.12, not needed -->
    <!--versionHamcrestCore>1.3</versionHamcrestCore-->
    <versionTestPlugins>2.20.1</versionTestPlugins>

    <srcJavaDir>src/main/java/</srcJavaDir>
    <srcAntlr4Dir>src/main/antlr4/</srcAntlr4Dir>
    <parserTargetDirRelana>
    ${srcJavaDir}eu/simuline/relana/parser/
    </parserTargetDirRelana>

    <tstSrcJavaDir>src/test/java/</tstSrcJavaDir>
    <tstResourcesDir>src/test/resources/</tstResourcesDir>
    <tstModelDirRel>../filteredTestResources/</tstModelDirRel>
    <tstModelDir>${project.build.testOutputDirectory}/${tstModelDirRel}</tstModelDir>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <!-- target repository. This will change. 
  In the long run it shall be something in www.simuline.eu -->
  <distributionManagement>
    <repository>
      <id>fileRepository</id>
      <url>file:///home/ernst/Software/RepositoryTarget</url>
    </repository>
  </distributionManagement>

  <build>
    <testResources>
      <testResource>
	<!-- in the resources plugin there should be a link to the pom design 
	allowing to specify the targetPath -->
	<targetPath>${tstModelDirRel}</targetPath>
	<!--targetPath>filteredTestResources</targetPath-->
	<!-- why is this not default? -->
	<directory>${tstResourcesDir}</directory>
        <filtering>true</filtering>
	<!-- rml-files shall be copied and filtered, others just copied. -->
        <!--includes>
         <include>**/*.rml</include>
 	</includes-->
      </testResource>
    </testResources>


    <plugins>
      <!-- information about a project or the system -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
        <version>2.2</version>
      </plugin>

      <!-- read/write property values -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>
                ${project.build.outputDirectory}/mvn.properties
              </outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- configuration for resources plugin -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
	<configuration>
	  <escapeString>\</escapeString> <!-- \${java.home} -> ${java.home} -->
          <!--nonFilteredFileExtensions>
            <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
          </nonFilteredFileExtensions-->
	  <!--outputDirectory>${basedir}/target/</outputDirectory-->
	</configuration>
      </plugin>


      <!-- configuration for clean plugin -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.0.0</version>
	<configuration>
	  <verbose>true</verbose>
	  <filesets>
	    <fileset>
	      <directory>${parserTargetDirRelana}</directory>
	      <includes>
		<include>**/*Lexer.java</include>
		<include>**/*Parser.java</include>
		<include>*Listener.java</include>
		<include>*Visitor.java</include>
		<include>**/*.tokens</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${srcJavaDir}</directory>
	      <includes>
		<include>*Lexer.java</include>
		<include>*Parser.java</include>
		<include>*.tokens</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${srcJavaDir}</directory>
	      <includes>
		<include>**/semantic.cache</include>
		<include>**/*.java~</include>
		<include>**/prj.el~</include>
		<include>**/*.m~</include>
		<include>**/*.properties~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${tstSrcJavaDir}</directory>
	      <includes>
		<include>**/semantic.cache</include>
		<include>**/*.java~</include>
		<include>**/prj.el~</include>
		<include>**/*.m~</include>
		<include>**/*.properties~</include>
		<include>**/*.xml~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${srcAntlr4Dir}</directory>
	      <includes>
		<include>**/*.g4~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${tstResourcesDir}</directory>
	      <includes>
		<include>**/*~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${basedir}</directory>
	      <includes>
		<include>**.xml~</include>
		<include>**.txt~</include>
		<include>junitvm*.properties</include>
		<include>java.hprof.txt</include>
		<include>*.tokens</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <!-- directory auto written by auctex is not cleaned -->
	      <directory>${basedir}/src/site/</directory>
	      <includes>
		<include>**/*.tex~</include>
		<include>**/*.aux</include>
		<include>**/*.log</include>
		<include>**/*.out</include> <!-- written by hyperref package -->
		<include>**/*.bbl</include> <!-- bibtex: bibliography -->
		<include>**/*.blg</include> <!-- bibtex: log-file -->
		<include>**/*.toc</include> <!-- table of contents -->
		<include>**/*.lof</include> <!-- list of figures -->
		<include>**/*.lot</include> <!-- list of tables -->
		<include>**/*.dvi</include>
		<include>**/*.pdf</include>
		<include>**/*.synctex.gz</include>
	      </includes>
	      <excludes>
		<exclude>external/**/*.pdf</exclude>
	      </excludes>
	    </fileset>
	  </filesets>
	</configuration>
     </plugin>


      <!-- This plugin will set properties values 
	   using dependency information -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-dependency-plugin</artifactId>
	<version>3.0.2</version>
	<executions>
	  <execution>
	    <goals>
	      <goal>properties</goal>
	    </goals>
	  </execution>
	</executions>
      </plugin>

      <!-- configuration for antlr4 -->
      <plugin>
	<groupId>org.antlr</groupId>
        <artifactId>antlr4-maven-plugin</artifactId>
        <version>${versionAntlr}</version>
	<configuration>
	  <sourceDirectory>${srcAntlr4Dir}</sourceDirectory>
	  <outputDirectory>src/main/java</outputDirectory>
	  <!--visitor>true</visitor--><!-- needed for calc only -->
	  <treatWarningsAsErrors>true</treatWarningsAsErrors>
        </configuration>
        <executions>
          <execution>
            <id>antlr</id>
            <goals>
              <goal>antlr4</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!-- configuration for the compile plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
            <source>1.8</source>
            <target>1.8</target>
            <fork>true</fork>

          <verbose>false</verbose>
	  <encoding>${project.build.sourceEncoding}</encoding><!--default-->
	  <debug>${javac.debug}</debug>
	  <debuglevel></debuglevel>
	  <compilerArgs>
	    <arg>-g</arg>
  	    <arg>-Xlint:unchecked</arg>
  	    <arg>-Xlint:deprecation</arg>
	  </compilerArgs>
          <fork>false</fork>
	  <showWarnings>false</showWarnings>
        </configuration>
      </plugin>

      <!-- configuration for tests -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${versionTestPlugins}</version>
        <configuration>
	  <redirectTestOutputToFile>true</redirectTestOutputToFile>

	  <parallel>methods</parallel>
	  <!--useUnlimitedThreads>true</useUnlimitedThreads-->
	  <perCoreThreadCount>false</perCoreThreadCount>
          <threadCount>1</threadCount>
	  <!--forkMode>always</forkMode--><!-- is deprecated -->
 
	  <forkCount>1C</forkCount>
	  <reuseForks>true</reuseForks>
	  <argLine>-Xmx800m</argLine>

	  <skipTests>false</skipTests>
	  <testFailureIgnore>true</testFailureIgnore>

	  <!-- **** check whether this is strictly required.  -->
	  <systemProperties>
	    <property>
	      <name>tstModelDir</name>     <value>${tstModelDir}</value>
	    </property>
	    <!--property>
	      <name>srcJavaDir</name>      <value>${srcJavaDir}</value>
	    </property-->
	  </systemProperties>

        </configuration>
     </plugin>

    </plugins>
  </build>

  <dependencies>

    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr4-runtime</artifactId>
      <version>${versionAntlr}</version>
    </dependency>

    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>ST4</artifactId>
      <version>${versionAntlrST4}</version>
    </dependency>

    <!-- used by ST4 -->
    <!-- https://mvnrepository.com/artifact/org.antlr/antlr-runtime -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-runtime</artifactId>
      <version>${versionAntlr3}</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${versionJUnit}</version>
    </dependency>
  </dependencies>
</project>
