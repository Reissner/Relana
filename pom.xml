<?xml version="1.0" encoding="utf-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" 
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- coordinates for model and artifact -->
  <modelVersion>4.0.0</modelVersion>


  <!-- The Basics -->
  <groupId>eu.simuline</groupId>
  <artifactId>Relana</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>

  <!-- information for generating a site -->
  <name>Relana</name>
  <description>
    An example for a modelling software. 
    This is in fact an old project. 
    It is important not so much because of its content 
    but to serve as a prototype to learn from. 

    Relana models are object oriented and compute probabilities 
    for loss of functionality. 
  </description>

  <url>http://www.simuline.eu/Relana/</url><!-- same as site-deploy -->
  <inceptionYear>2005</inceptionYear>
  <licenses>
    <license>
      <name>The Relana-License, Version 1.0</name>
      <url>http://www.simuline.eu/Relana/LICENSE-1.0.txt</url>
      <distribution>repo</distribution>
      <comments>This license grants the author a lot of control 
      on usage, study, modification and distribution of Relana. </comments>
    </license>
  </licenses>

  <organization>
    <name>l2r.org</name>
    <url>http://www.simuline.eu</url>
  </organization>

  <developers>
    <developer>
      <id>ER</id>
      <name>Ernst Reissner</name>
      <email>Ernst.Reissner@simuline.eu</email>
      <organization>l2r</organization>
      <timezone>Europe/Berlin</timezone>
      <properties>
        <picUrl>http://www.simuline.eu/Gluck_0001.gif</picUrl>
      </properties>
    </developer>
  </developers>
  <!-- mailingLists></mailingLists-->

  <!-- properties: ensures reproducibility -->
  <properties>
    <!-- to keep dependencies up to date: 
    mvn versions:display-plugin-updates
    mvn versions:display-dependency-updates -->
    <versionMvn>3.5.0</versionMvn>

    <versionPmd>5.8.1</versionPmd><!-- with mvn plugin 3.8 -->
    <versionPmdMvnPlugin>3.8</versionPmdMvnPlugin><!-- works with pmd 5.8.1 -->

    <!-- antlr4, its runtime and mvn plugin all same version, 
         tied to antlr-annotation and ST4 -->
    <versionAntlr>4.7</versionAntlr><!-- tied to antlr 4.7 -->
    <!--versionAntlrAnnot>4.3</versionAntlrAnnot--><!-- tied to antlr 4.7 -->
    <versionAntlrST4>4.0.8</versionAntlrST4>  <!-- tied to antlr 4.7 -->
    <versionAntlr3>3.5.2</versionAntlr3>  <!-- from ST4 -->

    <!-- up to date is 4.13 but there is no maven support for this. -->
    <versionJUnit>4.12</versionJUnit>
    <!-- tied to junit 4.12, not needed -->
    <!--versionHamcrestCore>1.3</versionHamcrestCore-->
    <versionTestPlugins>2.20.1</versionTestPlugins>

    <resourcesDir>src/main/resources</resourcesDir>
    <srcJavaDir>src/main/java/</srcJavaDir>
    <srcAntlr4Dir>src/main/antlr4/</srcAntlr4Dir>
    <parserTargetDirRelana>
      ${srcJavaDir}eu/simuline/relana/parser/
    </parserTargetDirRelana>

    <tstSrcJavaDir>src/test/java/</tstSrcJavaDir>
    <tstResourcesDir>src/test/resources/</tstResourcesDir>
    <tstModelDirRel>../filteredTestResources/</tstModelDirRel>
    <tstModelDir>
      ${project.build.testOutputDirectory}/${tstModelDirRel}
    </tstModelDir>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.pmd.rulesetfiles>
      ${basedir}/../config/myPmdRuleset.xml
    </maven.pmd.rulesetfiles>
  </properties>


  <!-- source repositories: at the moment for tests only. -->
  <repositories>
    <repository>
      <id>localRepository</id>
      <!--url>file:///home/ernst/Software/RepositoryLocal/maven2/</url-->
      <url>https://www.simuline.eu/RepositoryMaven</url>
    </repository>
  </repositories>


  <!-- target repository. This will change. 
  In the long run it shall be something in www.simuline.eu -->
  <distributionManagement>
    <site>
      <id>fileSite</id>
      <!--url>file:///home/ernst/Software/RepositoryTarget/Site</url-->
      <url>ftp://www.simuline.eu/public_html/Relana</url>
    </site>

    <repository>
      <id>fileRepository</id>
      <!--url>file:///home/ernst/Software/RepositoryTarget</url-->
      <!--url>ftp://www.simuline.eu/public_ftp/RepositoryTarget</url-->
      <url>ftp://www.simuline.eu/public_html/RepositoryMaven</url>
    </repository>
  </distributionManagement>

  <scm>
    <connection>scm:svn:file:///SVN_Archive</connection>
    <developerConnection>scm:svn:file:///SVN_Archive</developerConnection>
    <tag>HEAD</tag> <!-- the default -->
    <url>file:///SVN_Archive</url><!-- publicly browseable -->
  </scm>

  <!-- Build Settings -->
  <build>
    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
         <artifactId>wagon-ftp</artifactId>
         <version>2.10</version>
      </extension>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
         <artifactId>wagon-file</artifactId>
         <version>2.10</version>
      </extension>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
         <artifactId>wagon-http</artifactId>
         <version>3.1.0</version>
      </extension>
    </extensions>

    <resources>
      <resource>
	<directory>${resourcesDir}</directory>
       <excludes>
         <exclude>**/*</exclude>
 	</excludes>
      </resource>
     </resources>

    <testResources>
      <testResource>
	<!-- in the resources plugin there should be a link to the pom design 
	allowing to specify the targetPath -->
	<targetPath>${tstModelDirRel}</targetPath>
	<!--targetPath>filteredTestResources</targetPath-->
	<!-- why is this not default? -->
	<directory>${tstResourcesDir}</directory>
        <filtering>true</filtering>
	<!-- rml-files shall be copied and filtered, others just copied. -->
        <!--includes>
         <include>**/*.rml</include>
 	</includes-->
      </testResource>
    </testResources>


    <pluginManagement>
      <plugins>
	<!-- all plugins used for build and for reporting -->
	<!-- checkstyle plugin-->
	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-checkstyle-plugin</artifactId>
	  <version>2.17</version>

	  <dependencies>
	    <dependency>
	      <groupId>com.puppycrawl.tools</groupId>
	      <artifactId>checkstyle</artifactId>
	      <version>8.4</version>
	    </dependency>
	  </dependencies>

	  <configuration>
	    <headerLocation>
	      <!-- (Default: LICENSE.txt)
	      User property: checkstyle.header.file
	      Specifies the location of the License file 
	      (a.k.a. the header file) that can be used by Checkstyle 
	      to verify that source code has the correct license header. -->
	    </headerLocation>
 	    <violationIgnore>
	      <!-- User property: checkstyle.violation.ignore
		   Violations to ignore. 
		   This is a comma-separated list, 
		   each value being either a rule name, 
		   a rule category or a java package name of rule class. -->
	    </violationIgnore>
	    <configLocation>
	      ${basedir}/config/myChkStyleRuleset.xml
	    </configLocation>
	    <encoding>UTF-8</encoding>
	    <excludes>**/parser/**</excludes>
	  </configuration>
	</plugin>

	<!-- findbugs plugin -->
	<plugin>
	  <groupId>org.codehaus.mojo</groupId>
	  <artifactId>findbugs-maven-plugin</artifactId>
	  <version>3.0.5</version>
	  <configuration>
	    <xmlOutput>true</xmlOutput>
	    <onlyAnalyze>
	      eu.simuline.relana.expressions.*, 
	      eu.simuline.relana.model.*, 
	      eu.simuline.relana.sys.*, 
	    </onlyAnalyze>
	    <!-- Optional directory to put findbugs xdoc xml report -->
	    <!--xmlOutputDirectory>target/site</xmlOutputDirectory-->
	  </configuration>
  	</plugin>

      </plugins>
    </pluginManagement>

    <plugins>
      <!-- plugin to keep versions up to date -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.5</version>
      </plugin>

      <!-- at the moment just to enforce maven version 
	   **** seems to be buggy and to make also update of plugins unsafe -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M1</version>
        <executions>
          <execution>
            <id>enforce</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                 <!--version>${versionMvn}</version-->
                <requireMavenVersion>
                  <version>3.5.0</version>
                 </requireMavenVersion>
                <!--requireJavaVersion>
                  <version>1.8</version>
                </requireJavaVersion-->
              </rules>
	      <!--alwaysFail>true</alwaysFail-->
	      <fail>true</fail>
 	      <ignoreCache>true</ignoreCache>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- information about a project or the system -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
        <version>2.2</version>
      </plugin>

      <!-- read/write property values -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>
                ${project.build.outputDirectory}/mvn.properties
              </outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- configuration for resources plugin -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
	<configuration>
	  <escapeString>\</escapeString> <!-- \${java.home} -> ${java.home} -->
          <!--nonFilteredFileExtensions>
            <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
          </nonFilteredFileExtensions-->
	  <!--outputDirectory>${basedir}/target/</outputDirectory-->
	</configuration>
      </plugin>


      <!-- configuration for clean plugin -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.0.0</version>
	<configuration>
	  <verbose>true</verbose>
	  <filesets>
	    <fileset>
	      <directory>${parserTargetDirRelana}</directory>
	      <includes>
		<include>**/*Lexer.java</include>
		<include>**/*Parser.java</include>
		<include>*Listener.java</include>
		<include>*Visitor.java</include>
		<include>**/*.tokens</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${srcJavaDir}</directory>
	      <includes>
		<include>*Lexer.java</include>
		<include>*Parser.java</include>
		<include>*.tokens</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${srcJavaDir}</directory>
	      <includes>
		<include>**/semantic.cache</include>
		<include>**/*.java~</include>
		<include>**/prj.el~</include>
		<include>**/*.m~</include>
		<include>**/*.properties~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${tstSrcJavaDir}</directory>
	      <includes>
		<include>**/semantic.cache</include>
		<include>**/*.java~</include>
		<include>**/prj.el~</include>
		<include>**/*.m~</include>
		<include>**/*.properties~</include>
		<include>**/*.xml~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${srcAntlr4Dir}</directory>
	      <includes>
		<include>**/*.g4~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${tstResourcesDir}</directory>
	      <includes>
		<include>**/*~</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <directory>${basedir}</directory>
	      <includes>
		<include>**.xml~</include>
		<include>**.txt~</include>
		<include>junitvm*.properties</include>
		<include>java.hprof.txt</include>
		<include>*.tokens</include>
	      </includes>
	    </fileset>
	    <fileset>
	      <!-- directory auto written by auctex is not cleaned -->
	      <directory>${basedir}/src/site/</directory>
	      <includes>
		<include>**/*.tex~</include>
		<include>**/*.aux</include>
		<include>**/*.log</include>
		<include>**/*.out</include> <!-- written by hyperref package -->
		<include>**/*.bbl</include> <!-- bibtex: bibliography -->
		<include>**/*.blg</include> <!-- bibtex: log-file -->
		<include>**/*.toc</include> <!-- table of contents -->
		<include>**/*.lof</include> <!-- list of figures -->
		<include>**/*.lot</include> <!-- list of tables -->
		<include>**/*.dvi</include>
		<include>**/*.pdf</include>
		<include>**/*.synctex.gz</include>
	      </includes>
	      <excludes>
		<exclude>external/**/*.pdf</exclude>
	      </excludes>
	    </fileset>
	  </filesets>
	</configuration>
     </plugin>


      <!-- This plugin will set properties values 
	   using dependency information -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-dependency-plugin</artifactId>
	<version>3.0.2</version>
	<executions>
	  <execution>
	    <goals>
	      <goal>properties</goal>
	    </goals>
	  </execution>
	</executions>
      </plugin>

      <!-- configuration for antlr4 -->
      <plugin>
	<groupId>org.antlr</groupId>
        <artifactId>antlr4-maven-plugin</artifactId>
        <version>${versionAntlr}</version>
	<configuration>
	  <sourceDirectory>${srcAntlr4Dir}</sourceDirectory>
	  <outputDirectory>src/main/java</outputDirectory>
	  <!--visitor>true</visitor--><!-- needed for calc only -->
	  <treatWarningsAsErrors>true</treatWarningsAsErrors>
        </configuration>
        <executions>
          <execution>
            <id>antlr</id>
            <goals>
              <goal>antlr4</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!-- compiler plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
            <source>1.8</source>
            <target>1.8</target>
            <fork>true</fork>

          <verbose>false</verbose>
	  <encoding>${project.build.sourceEncoding}</encoding><!--default-->
	  <debug>${javac.debug}</debug>
	  <debuglevel></debuglevel>
	  <compilerArgs>
	    <arg>-g</arg>
  	    <arg>-Xlint:unchecked</arg>
  	    <arg>-Xlint:deprecation</arg>
  	    <arg>-Xlint:-processing</arg>
	  </compilerArgs>
          <fork>false</fork>
	  <showWarnings>false</showWarnings>
        </configuration>
      </plugin>

      <!-- configuration for site -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.7</version>
        <configuration>
          <locales>en</locales>
        </configuration>
      </plugin>

      <!-- configuration for tests -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${versionTestPlugins}</version>
        <configuration>
	  <redirectTestOutputToFile>true</redirectTestOutputToFile>

	  <parallel>methods</parallel>
	  <!--useUnlimitedThreads>true</useUnlimitedThreads-->
	  <perCoreThreadCount>false</perCoreThreadCount>
          <threadCount>1</threadCount>
	  <!--forkMode>always</forkMode--><!-- is deprecated -->
 
	  <forkCount>1C</forkCount>
	  <reuseForks>true</reuseForks>
	  <argLine>-Xmx800m</argLine>

	  <skipTests>false</skipTests>
	  <testFailureIgnore>true</testFailureIgnore>

	  <!-- **** check whether this is strictly required.  -->
	  <!-- **** deprecated -->
	  <systemProperties>
	    <property>
	      <name>tstModelDir</name>     <value>${tstModelDir}</value>
	    </property>
	    <!--property>
	      <name>srcJavaDir</name>      <value>${srcJavaDir}</value>
	    </property-->
	  </systemProperties>

        </configuration>
     </plugin>

     <!-- pmd plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>${versionPmdMvnPlugin}</version><!-- works with pmd 5.8.1 -->
	<!-- if update then also config/myruleset.xml as described there -->
	<!--executions>
	  <execution>
	    <goals>
	      <goal>check</goal>
	    </goals>
	  </execution>
	</executions-->
        <dependencies>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-core</artifactId>
            <version>${versionPmd}</version>
          </dependency>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-java</artifactId>
            <version>${versionPmd}</version>
          </dependency>
        </dependencies>

        <configuration>
          <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
	  <!--  in addition to "none", "csv", "xml", "txt" 
	       or the full class name of the PMD renderer to use. -->
          <minimumTokens>100</minimumTokens><!-- for cpd -->
	  <format>xml</format>

	  <skip>false</skip>
	  <skipEmptyReport>false</skipEmptyReport>
	  <!--suppressMarker>NOPMD</suppressMarker-->
	  <includeTests>false</includeTests>
          <rulesets>
	    <ruleset>${maven.pmd.rulesetfiles}</ruleset>
          </rulesets>
          <excludes>
            <exclude>eu/simuline/relana/parser/*Lexer.java</exclude>
            <exclude>eu/simuline/relana/parser/SClassParser.java</exclude>
            <exclude>eu/simuline/relana/parser/*Parser.java</exclude>
	    <include>eu/simuline/relana/parser/*Listener.java</include>
	    <include>eu/simuline/relana/parser/*Visitor.java</include>
          </excludes>
	  <outputDirectory>${project.basedir}/target/site/</outputDirectory>
        </configuration>

      </plugin>


      <!-- javadoc plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.0.0-M1</version>
        <configuration>
	  <!--phase>generate-sources</phase--> <!-- this is the default -->
	  <sourcepath>
	    ${project.basedir}/src/main/java:${project.basedir}/src/test/java
	  </sourcepath>
	  <tags>
	    <tag>
	      <name>To.Do</name>
	      <!-- todo tag for all places -->
	      <placement>a</placement>
	      <head>what is to be done in the present code fragment. </head>
	    </tag>
	  </tags>
	  <excludePackageNames>
	    eu.simuline.junit
	  </excludePackageNames>
	  <breakiterator>true</breakiterator>
	  <!-- does not work with current plugin version: bug already filed 
	  -->
	  <links>
	    <link>file:///usr/share/javadoc/java-1.8.0-openjdk/api/</link>
	    <link>http://www.antlr.org/api/JavaTool/</link>
	    <link>http://www.antlr.org/api/Java/</link>
	    <link>http://www.stringtemplate.org/api/</link>
	    <link>https://jna.java.net/javadoc/</link>
	    <link>http://junit.sourceforge.net/javadoc</link>
	  </links>

          <show>private</show>
	  <!-- **** myDefault should be linked to ${basedir}/config/MathJax.. -->
	  <additionalparam>-Xdoclint:html -Xdoclint:reference --allow-script-in-comments</additionalparam>
	  <header>Relana
<!--&lt;script type="text/javascript" \
	  src="file:///${basedir}/jars/MathJax/latest/MathJax.js?config=myDefault"&gt; &lt;/script&gt;-->
	  </header>
	</configuration>
      </plugin>


      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <archive>
            <!--manifestFile>
	    ${project.build.outputDirectory}/META-INF/MANIFEST.MF
	    </manifestFile-->
	    <manifest>
	      <!-- adds the following lines to MANIFEST.MF (default is false): 
		   Implementation-Title: ${project.name}
		   Implementation-Version: ${project.version}
		   Implementation-Vendor-Id: ${project.groupId}
		   Implementation-Vendor: ${project.organization.name}
		   Implementation-URL: ${project.url} -->
	      <addDefaultImplementationEntries>
		true
	      </addDefaultImplementationEntries>
	      <!-- adds the following lines to MANIFEST.MF (default is false): 
		   Specification-Title: ${project.name}
		   Specification-Version: 
		   ${project.artifact.selectedVersion.majorVersion}.
		   ${project.artifact.selectedVersion.minorVersion}
		   Specification-Vendor: ${project.organization.name} -->
	      <addDefaultSpecificationEntries>
		true
	      </addDefaultSpecificationEntries>
	      <mainClass>eu.simuline.relana.sys.Relana</mainClass>
	    </manifest>
	    <manifestEntries>
	      <codebase>https://www.simuline.eu</codebase>
	    </manifestEntries>
          </archive>
	  <includes>
            <include>eu/**</include>
            <include>org/antlr/v4/**</include>
          </includes>
        </configuration>
      </plugin>

      <!-- creates a jar with dependencies -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <archive>
	    <manifest>
	      <mainClass>eu.simuline.relana.sys.Relana</mainClass>
	    </manifest>
         </archive>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase> 
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-install-plugin</artifactId>
	<version>2.5.2</version>
      </plugin>
     
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-deploy-plugin</artifactId>
	<version>2.8.2</version>
      </plugin>

    </plugins>
  </build>

  <reporting>
    <plugins>

      <!-- creates a representation of the source code 
	   with line numbers and cross references. 
	   Forms the base for pmd, findbgs and checkstyle 
	   e.g. providing line numbers -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-jxr-plugin</artifactId>
	<version>2.5</version>
      </plugin>

      <!-- configures the aspects of the reporting, 
	   i.e. the kinds of reports generated. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.9</version>
        <configuration>
          <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
        </configuration>
	<reportSets>
	  <reportSet>
	    <id>gen-report</id>
	    <reports>
	      <report>index</report>
	      <report>summary</report>
	      <report>license</report>
	      <report>project-team</report>

	      <report>cim</report>
	      <!--report>dependencies</report-->
	      <report>dependency-convergence</report>
	      <report>dependency-info</report>
	      <report>dependency-management</report>
	      <report>distribution-management</report>
	      <report>issue-tracking</report>
	      <report>mailing-list</report>
	      <report>modules</report>
	      <report>plugin-management</report>
	      <report>plugins</report>
	      <report>scm</report>
	    </reports>
	  </reportSet>
	</reportSets>
      </plugin>

      <!-- Creates surefire test reports -->
      <plugin>
 	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>${versionTestPlugins}</version>
	<configuration>
	  <!-- to show failed tests only -->
	  <showSuccess>false</showSuccess>
	</configuration>
      </plugin>

      <!-- pmd plugin **** reporting or build? -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-pmd-plugin</artifactId>
	<version>${versionPmdMvnPlugin}</version><!-- works with pmd 5.8.1 -->
        <!--dependencies>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-core</artifactId>
            <version>${versionPmd}</version>
          </dependency>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-java</artifactId>
            <version>${versionPmd}</version>
          </dependency>
        </dependencies-->
       <configuration>
          <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
	  <!--  in addition to "none", "csv", "xml", "txt" 
	       or the full class name of the PMD renderer to use. -->
          <minimumTokens>100</minimumTokens><!-- for cpd -->
	  <format>xml</format>

	  <skip>false</skip>
	  <skipEmptyReport>false</skipEmptyReport>
	  <!--suppressMarker>NOPMD</suppressMarker-->
	  <includeTests>false</includeTests>
          <rulesets>
	    <ruleset>${maven.pmd.rulesetfiles}</ruleset>
          </rulesets>
          <excludes>
            <exclude>eu/simuline/relana/parser/*Lexer.java</exclude>
            <exclude>eu/simuline/relana/parser/SClassParser.java</exclude>
            <exclude>eu/simuline/relana/parser/*Parser.java</exclude>
	    <include>eu/simuline/relana/parser/*Listener.java</include>
	    <include>eu/simuline/relana/parser/*Visitor.java</include>
          </excludes>
	  <outputDirectory>${project.basedir}/target/site/</outputDirectory>
        </configuration>
      </plugin>

      <plugin>
 	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <!--version>2.17</version>

	<dependencies>
	  <dependency>
	    <groupId>com.puppycrawl.tools</groupId>
	    <artifactId>checkstyle</artifactId>
	    <version>8.4</version>
	  </dependency>
	</dependencies>

	<configuration>
	  <configLocation>
	    ${basedir}/config/myChkStyleRuleset.xml
	  </configLocation>
         <encoding>UTF-8</encoding>
	  <excludes>**/parser/**</excludes>
	</configuration-->
      </plugin>

      <!-- findbugs -->
      <plugin>
 	<groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
	<configuration>
	  <xmlOutput>true</xmlOutput>
	  <onlyAnalyze>
	    eu.simuline.relana.expressions.*, 
	    eu.simuline.relana.model.*, 
	    eu.simuline.relana.sys.*, 
	    eu.simuline.testhelpers.*, 
	    eu.simuline.util.*, 
	  </onlyAnalyze>
	  <!-- Optional directory to put findbugs xdoc xml report -->
	  <!--xmlOutputDirectory>target/site</xmlOutputDirectory-->
        </configuration>
      </plugin>

      <!-- pmd plugin **** reporting or build? -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>${versionPmdMvnPlugin}</version><!-- works with pmd 5.8.1 -->
        <!--dependencies>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-core</artifactId>
            <version>${versionPmd}</version>
          </dependency>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-java</artifactId>
            <version>${versionPmd}</version>
          </dependency>
        </dependencies-->

        <configuration>
	  <format>xml</format><!--  in addition to "none", "csv", "xml", "txt" or the full class name of the PMD renderer to use. -->
	  <skip>false</skip>
	  <skipEmptyReport>false</skipEmptyReport>
	  <!--suppressMarker>NOPMD</suppressMarker-->
	  <includeTests>false</includeTests>
          <rulesets>
	    <ruleset>${maven.pmd.rulesetfiles}</ruleset>
          </rulesets>
           <excludes>
            <exclude>eu/simuline/relana/parser/FormulaLexer.java</exclude>
            <exclude>eu/simuline/relana/parser/FormulaParser.java</exclude>
	    <exclude>eu/simuline/relana/parser/Formula*Listener.java</exclude>
	    <exclude>eu/simuline/relana/parser/Formula*Visitor.java</exclude>

            <exclude>eu/simuline/relana/parser/CClassLexer.java</exclude>
            <exclude>eu/simuline/relana/parser/CClassParser.java</exclude>
	    <exclude>eu/simuline/relana/parser/CClass*Listener.java</exclude>
	    <exclude>eu/simuline/relana/parser/CClass*Visitor.java</exclude>

            <exclude>eu/simuline/relana/parser/SClassLexer.java</exclude>
            <exclude>eu/simuline/relana/parser/SClassParser.java</exclude>
	    <exclude>eu/simuline/relana/parser/SClass*Listener.java</exclude>
	    <exclude>eu/simuline/relana/parser/SClass*Visitor.java</exclude>
          </excludes>
	  <outputDirectory>${project.basedir}/target/site/</outputDirectory>
        </configuration>
      </plugin>

      <!-- determines code coverage of tests 
	   **** ignores and excludes are .... ignored **** -->
      <plugin>
	<groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.7</version>
	<configuration>
          <instrumentation>
            <ignores>
              <ignore>org.*</ignore>
            </ignores>
	    <excludes>
	      <exclude>org/**/*.class</exclude>
	    </excludes>

	  </instrumentation>
	  <quiet>true</quiet>
	  <formats>
	    <format>xml</format>
	    <format>html</format>
	  </formats>
	</configuration>
      </plugin>


      <!-- **** seems not to work currently -->
      <!--plugin>
	<groupId>org.jacoco</groupId>
	<artifactId>jacoco-maven-plugin</artifactId>
	<version>0.7.9</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin-->


      <!--plugin>
        <groupId>com.atlassian.maven.plugins</groupId>
        <artifactId>maven-clover2-plugin</artifactId>
	<version>4.0.6</version>
     </plugin-->

      <!--plugin>
        <groupId>org.scoverage</groupId>
        <artifactId>scoverage-maven-plugin</artifactId>
        <version>1.3.0</version>
	<configuration>
	  <scalacPluginVersion>1.3.0</scalacPluginVersion>
	  <scalaVersion>2.11.8</scalaVersion>
	</configuration>
      </plugin-->

      <!-- javadoc plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.0.0-M1</version>
        <configuration>
	  <!--phase>generate-sources</phase--> <!-- this is the default -->
	  <sourcepath>
	    ${project.basedir}/src/main/java:${project.basedir}/src/test/java
	  </sourcepath>
	  <tags>
	    <tag>
	      <name>To.Do</name>
	      <!-- todo tag for all places -->
	      <placement>a</placement>
	      <head>what is to be done in the present code fragment. </head>
	    </tag>
	  </tags>
	  <excludePackageNames>
	    eu.simuline.junit
	  </excludePackageNames>
	  <breakiterator>true</breakiterator>
	  <!-- does not work with current plugin version: bug already filed 
	  -->
	  <links>
	    <link>file:///usr/share/javadoc/java-1.8.0-openjdk/api/</link>
	    <link>http://www.antlr.org/api/JavaTool/</link>
	    <link>http://www.antlr.org/api/Java/</link>
	    <link>http://www.stringtemplate.org/api/</link>
	    <link>https://jna.java.net/javadoc/</link>
	    <link>http://junit.sourceforge.net/javadoc</link>
	  </links>
          <show>private</show>
	  <!-- **** myDefault should be linked to ${basedir}/config/MathJax.. -->
	  <additionalparam>-Xdoclint:html -Xdoclint:reference --allow-script-in-comments</additionalparam>
	  <header>Relana
<!--&lt;script type="text/javascript" \
	  src="file:///${basedir}/jars/MathJax/latest/MathJax.js?config=myDefault"&gt; &lt;/script&gt;-->
	  </header>
	</configuration>
      </plugin>

      <!-- changes plugin: src/changes/changes.xml -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-changes-plugin</artifactId>
        <version>2.12.1</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>changes-report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

    </plugins>
  </reporting>

  <dependencies>

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <version>${versionMvn}</version>
    </dependency>

    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr4-runtime</artifactId>
      <version>${versionAntlr}</version>
    </dependency>

    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>ST4</artifactId>
      <version>${versionAntlrST4}</version>
    </dependency>

    <!-- used by ST4 -->
    <!-- https://mvnrepository.com/artifact/org.antlr/antlr-runtime -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-runtime</artifactId>
      <version>${versionAntlr3}</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${versionJUnit}</version>
    </dependency>

    <dependency>
      <groupId>eu.simuline</groupId>
      <artifactId>TestHelpers</artifactId>
      <version>1.0</version>
      <!--scope>compile test</scope-->
    </dependency>

    <!-- this one is outdated and replaced by 
    com.google.code.findbugs/annotations 
    which cannot be downloaded although in repo. -->
    <dependency>
      <groupId>net.sourceforge.findbugs</groupId>
      <artifactId>annotations</artifactId>
      <version>1.3.2</version>
      <!--scope>provided</scope-->
    </dependency>

    <!--dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>annotations</artifactId>
      <version>‌​3.0.1</version>
   </dependency-->
  </dependencies>
</project>
